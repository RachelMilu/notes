以下内容是学习《高级程序设计》的笔记，
/*继承*/

//利用原型链实现继承
//ECMAScript利用原型链继承，利用原型让一个引用类型获得另一个引用类型的属性和方法。
//让原型对象等于一个类型的实例对象。
//问题：1.实例的私有属性会变成原型属性，如果原型属性是引用类型的话，会被覆盖.
//     2.不能向超类的构造器传递参数:如果向超类传递参数，可以影响所有子类的实例。
//     3.原型中的属性如果指向引用类型，会导致某个实例的修改能够影响所有实例

function Super(name){
    this.list = ['a','b']
    this.name = name;

    this.sayHi = function(){
        alert(name);
    }
}

function Sub(){

}
Sub.prototype = new Super('lili');
var instance = new Sub();
console.log(instance.name)


//借用构造函数（也叫作伪造对象 或者 经典继承）
//思路：在子类构造函数里调用超类的构造函数
//优势：可以传递参数 有实例私有的变量和方法
//缺点：不能函数复用 子类不可见超类的原型对象


function Super(name){
    this.list = ['a','b']
    this.name = name;
    console.log(1111111+name)
    this.sayHi = function(){
        alert(name);
    }

}
Super.prototype.sing = function(){
    alert("sing");
}

function Sub(name,age){
    Super.call(this,name)
}
var instance = new Sub("lili");
var instance2 = new Sub("andy");



//组合继承 也叫伪经典继承 也就是组合原型链继承和借用构造函数继承
// 技能传递参数给超类，变成实例私有的副本，又能继承原型链上的方法 instanceof 操作符和isPrototypeOf方法也能正确识别
// 缺点：会调用两次超类的构造函数，为了使子类实例能拥有各自的属性，不得不在调用子类构造函数时重写这些属性（从而屏蔽原型中的属性）
function Super(name){
    this.list = ['a','b']
    this.name = name;
    console.log(1111111+name)
    this.sayHi = function(){
        alert(name);
    }

}
Super.prototype.sing = function(){
    alert("sing");
}

function Sub(name,age){
    Super.call(this,name)
}
Sub.prototype = new Super();
Sub.prototype.constructor = Sub;//
var instance = new Sub("lili");
var instance2 = new Sub("andy");

/*
* instance instanceof Sub
 true
 instance instanceof Super
 true
 Super.prototype.isPrototypeOf(instance)
 true
 Sub.prototype.isPrototypeOf(instance)
 true
* */


//原型式继承
//要求有一个Object可以作为另一个对象的基础
//实际上就是把基础对象浅拷贝了一份 包含引用类型的值得属性始终会被共享
//es5的 Object.create方法规范了原型式继承

function object(obj){
    function F(){}
    F.prototype = obj;
    return new F();
}

var a = {
    "name":"lili",
    "age":'21'
}
var b = object(a);//b是个类型为F的跟a拥有一样属性的对象



//寄生式继承
//思路：创建一个仅用于封装继承过程的函数，该函数在内部以某种方式来增强对象，最后返回对象。

function object(obj){
    function F(){}
    F.prototype = obj;//这个对象可以得到obj的所有属性
    return new F();
}

function Create(obj){
    var copy = object(obj);
    copy.sayHi = function(){
        alert("hi");
    }
    return copy;

}


//寄生组合式继承
//利用寄生继承拷贝超类的原型对象
//利用借用构造函数生成实例的私有变量
//优点：相比起组合组合继承，寄生组合继承只需要调用一次超类的构造器，不会生成原型链上不必要的属性
function Super(name){
    this.name = name;
    this.color = [1,2,3];
    this.sayHi = function(){
        alert(this.color)
    }
}

function Sub(name,age){
    Super.call(this,name)
    this.age = age;
    this.sing = function(){
        alert(age)
    }

}
function inheritPrototype(Sub,Super){
    var copy = Object(Super.prototype);
    copy.constructor = Sub;
    Sub.prototype = copy;
}

inheritPrototype(Sub,Super);

var a = new Sub("lili",21);
var b = new Sub("tom",22);


//总结：
//组合继承（伪经典继承 combination inheritance）就是把子类的prototype指向超类的实例对象，超类的私有属性会变成子类的原型属性，因此需要多调用一次超类的构造函数使得子类的实例生成自己的实例属性，屏蔽原型链上的属性
//寄生组合式继承 就是把子类的prototype 指向超类的protorype的一个拷贝，原型链上的继承就利用这点，属性的继承就利用在子类的构造函数中调用超类的构造函数。













/*工厂模式*/
/*
优点：创建多个相似对象
问题：没有解决对象识别的问题
*/

function creatPerson(age,name,gender){
    var obj = new Object();
    obj.age = age;
    obj.name = name;
    obj.gender = gender;
    obj.sayHi = function(){
        alert('hi!')
    }
    return obj;
}
var lili = creatPerson(21,"lili","femail");
var tom = creatPerson(30,"Tom","mail");

/*构造函数模式*/
/* 特点：
 没有显示地创造对象
 直接将属性赋值给this
 没有return
 构造器函数首字母大写，用new关键字来调用

 优点：
 可以将构造出来的示例对象标识为一种特定的类型

 缺点：
 构造函数里的方法们会在没个实例上各自创造一遍
*/
function Person(age,name,gender){
    this.age = age;
    this.name = name;
    this.gender = gender;
    this.sayHi = function(){//这行等于 this.sayHi = new Function(){...}
        alert('hi!');
    }
}

var lili2 = new Person(21,'lili2',"f");
var tom2 = new Person(21,'tom2',"m");
/*
使用new操作符调用构造器函数实际上做了以下四步骤：
1.创建一个对象
2.构造器的this指向新创建的对象
3.执行构造器函数里的代码
4.返回对象
*/

/*
 这个时候lili2.constructor === Person === tom2.constructor
 constructor可以用来表示对象的类型
 也可以用instaneof操作符
 lili2 instanceof Object
 //true
 lili2 instanceof Person
 //true
*/


/*原型模式*/
/*
问题：所有实例共享原型属性和方法，容易被修改掉
*/
function Person(){

}
Person.prototype.age = "0";
Person.prototype.name = "lili";
Person.prototype.gender = "f";

var lili = new Person();
var tom = new Person();


/*组合构造函数模式和原型模式*/
function Person(age,name,gender){
    this.age = age;
    this.name = name;
    this.gender = gender;
    this.sayHi = function(){//这行等于 this.sayHi = new Function(){...}
        alert('hi!');
    }
}
Person.prototype.laugh = function(){
    aler("hahhhh~");
}
var lili = new Person();
var tom = new Person();


/*动态原型模式*/
//在构造函数中创建原型方法
//这种方式不能用字面量方法重写原型，会切断实例与新原型之间的关系
function Person(age,name,gender){
    this.age = age;
    this.name = name;
    this.gender = gender;
    this.sayHi = function(){//这行等于 this.sayHi = new Function(){...}
        alert('hi!');
    }
    if(typeof this.laugh != "function"){//只需要检查一个即可
        Person.prototype.laugh = function(){

        }
        //...

    }
}


/*寄生parasitic构造函数*/
//创建一个函数，该函数的作用仅仅用来封装新创建的对象的代码，然后返回改对象。
//构造函数在不反悔值得情况下，会默认返回新的实例对象，通过在构造函数里的return语句，重写返回的一个对象。
//适用场景：如创建一个特殊的Array
//返回的实例对象跟构造函数和原型对象是没有关系的，不能用instanceof操作符来确定对象类型

function sArray(){
    var arr = new Array();
    arr.push.apply(arr,arguments);
    arr.sing = function(){
        alert('llalala')
    }
    return arr;
}

var arr = new sArray("dd","ff","ddd");
arr.sing();


/*稳妥对象和稳妥构造函数*/
//稳妥对象durable objects：没有公共属性的，其方法也不引用this的对象。
//稳妥构造函数：创建对象的实例方法不使用this，不使用new操作符调用构造函数。
function Person(){
    var a = {};
    a.sayHi = function (){

    }
    return a;
}

var a = Person();




















